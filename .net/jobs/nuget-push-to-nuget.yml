parameters:
  jobName: 'DeployNuget'
  jobDisplayName: 'Deploy to Nuget'
  pool: 'Default'
  artifactName: 'nuget'
  publishFeedCredentials: ''
  allowPackageConflicts: true
  nugetPackageVersion: ''

jobs:
  - deployment: ${{ parameters.jobName }}
    displayName: ${{ parameters.jobDisplayName }}
    pool: ${{ parameters.pool }}
    variables:
        nugetVersion: ${{ parameters.nugetPackageVersion }}
        isDuplicate: false
        allowPackageConflicts: ${{ parameters.allowPackageConflicts }}
    environment: PreviewAzure
    strategy:
      runOnce:
        deploy:
          steps:
          - task: DownloadPipelineArtifact@1
            inputs:
              artifactName: ${{ parameters.artifactName }}
              targetPath: $(Build.ArtifactStagingDirectory)

          - task: Powershell@2
            name: setNugetIsDuplicateVar
            displayName: 'Nuget Conflict Check'
            inputs:
              targetType: inline
              script: |
                 . $(Build.SourcesDirectory)/build/Get-IsDuplicateNugetPackage.ps1
                  
                  $isDuplicate = Get-IsDuplicateNugetPackage -PackageId "LCattell.ReflectionExtensions" -Version "$env:nugetVersion";
                   
                  Write-Output ("##vso[task.setvariable variable=isDuplicate;]$isDuplicate");

                  Write-Host $isDuplicate;
            condition: eq(variables['allowPackageConflicts'], true)

          - task: Powershell@2
            name: setNugetIsDuplicateVarDebug
            displayName: 'Var Debug'
            inputs:
              targetType: inline
              script: |
                Write-Host "'Env:nugetVersion:'" "$env:nugetVersion, $(nugetVersion)"
                Write-Host "'env:IsDuplicate:' $env:isDuplicate";
                Write-Host "IsDuplicate:" $(isDuplicate);

          - task: NuGetCommand@2
            displayName: Publish to Nuget
            inputs:
              command: 'push'
              packagesToPush: '$(Build.ArtifactStagingDirectory)/**/*.nupkg;!$(Build.ArtifactStagingDirectory)/**/*.symbols.nupkg'
              nuGetFeedType: 'external'
              publishFeedCredentials: ${{ parameters.publishFeedCredentials }}
              allowPackageConflicts: ${{ parameters.allowPackageConflicts }}
            condition: ne(variables['isDuplicate'], true)
    condition: > 
      and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'), 
        or(eq(variables['Build.SourceBranch'], 'refs/heads/master'),
          startswith(variables['Build.SourceBranch'], 'refs/heads/release/'),
          startswith(variables['Build.SourceBranch'], 'refs/heads/azure-pipelines-test')) )