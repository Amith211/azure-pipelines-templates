parameters:
  jobName: 'DeployNugetAzureArtifacts'
  jobDdisplayName: 'Deploy to Azure Artifacts'
  pool: 'Default'
  environment: 'AzureArtifacts'
  artifactName: 'nuget'
  azureDevOpsOrg: ''
  publishDevOpsFeed: ''
  islegacyDevOpsUrl: false
  nugetServerApiVersion: 'v3'
  packagesGlob: ''
  allowPackageConflicts: true

jobs:
  - deployment: ${{ parameters.jobName }}
    displayName: ${{ parameters.jobDisplayName }}
    pool: ${{ parameters.pool }}
    variables:
        nugetVersion: "t"
    environment: ${{ parameters.environment }}
    strategy:
      runOnce:
        deploy:
          steps:
          - task: DownloadPipelineArtifact@1
            inputs:
              artifactName: ${{ parameters.artifactName }}
              targetPath: $(Build.ArtifactStagingDirectory)
          - task: NuGetAuthenticate@0
          - task: Powershell@2
            name: getnuGetUrl
            displayName: 'Get Nuget Server Url'
            env:
              org: ${{ parameters.azureDevOpsOrg }}
              feed: ${{ parameters.publishDevOpsFeed }}
              isLegacyUrl: ${{ parameters.islegacyDevOpsUrl }}
              apiVersion: ${{ parameters.nugetServerApiVersion }}
              skipDiplicate: ${{ parameters.allowPackageConflicts }}
            inputs:
              targetType: inline
              script: |
                $orgUrl = '';             

                Write-Host "##[debug] isLegacyUrl:- $env:isLegacyUrl";
                Write-Host "##[debug] isLeacyUrl true:- $($env:isLegacyUrl -eq $true)";

                if($env:isLegacyUrl -eq $true)
                {
                  $orgUrl = "$env:ORG.pkgs.visualstudio.com"
                } else
                {
                  $orgUrl = "pkgs.dev.azure.com/$env:ORG"
                }

                $output = "https://$orgUrl/_packaging/$env:FEED/nuget/$env:APIVERSION/index.json";

                Write-Output "##vso[task.setvariable variable=nugetserverSource;isOutput=true]$output";
          - template: ../steps/nuget-push.yml
            parameters:
              artifactName: ${{ parameters.artifactName }}
              apiKeyVar: 'AzurePipeline'
              serverSource: $(getnuGetUrl.nugetserverSource)
              ${{ if ne(parameters.packagesGlob, '') }}:
                packagesGlob: ${{ parameters.packagesGlob }}
              allowPackageConflicts: ${{ parameters.allowPackageConflicts }}
    condition: > 
      and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'), 
        or(eq(variables['Build.SourceBranch'], 'refs/heads/master'),
          startswith(variables['Build.SourceBranch'], 'refs/heads/release/'),
          startswith(variables['Build.SourceBranch'], 'refs/heads/azure-pipeline')) )
